// Numbers
println (10 + 20);
println (10.34 + 4_000_000.013_994);

// String
println ("Hello World
I can be multiline");

// Boolean
println (true);
println (not false);

// Null
println (null);

// Error
let e = error("Runtime Error");
println (type(e), e);

// List
ls := [10, 04.03, "hey", null];
println (ls);
println (ls[0]);
println (ls[100] or "Not a value");

// Map
m := {
    key: 10,
    otherkey: "hey",
    callback: fun (a, b) {
        return a + b;
    }
};

println (m);
println (m["key"]);
println (m.otherkey);
println (m.callback (10, 20));


// First class and Higher ordered Function
Complex := fun (real, img) {
    self := {};

    self.real = real;
    self.img = img;

    self.__str__ = fun () {
        return str(real) + " i" + str(img);
    };

    return self;
};

// Let statement
let newvariable = 10;
newvariable = 203;
newvariable = "Hey";

idontknowifalreadydefined := 10;
idontknowifalreadydefined := "Hello World";

// Conditions
// Conditions expression can hold multiple expressions
if x := 10; x > 10 {
    println ("Greater than 10");
} else if x < 10 {
    println ("Smaller");
} else {
    println ("Equal");
}

// Loop

count := 0;
for true {
    count = count + 1;
    if count >= 20 {
        break;
    }
    if count % 5 {
        println ("skipping");
        continue;
    }
    println ("i am running");
}

// defer
defer { println ("I will print in the end"); };

// Builtins

// println
// Print argument values
println ("Hello", 10, 20.03, Complex(10, 20), e);


// print
// Print arguments without new line
println ("Hello", 10, 20.03, Complex(10, 20), e);

// gc
// Manually run gc
gc();


// len
// Print size of value
len("Hello World");
len([10, 20, 30]);

// append
// Append value in string and list
l := [];
append (l, 10);
append (l, 20);
append (l, 30);

println (l);

// range
// Create range of values

println (range (4));            // [0, 1, 2, 3]
println (range (4, 10));        // [4, 5, 6, 7, 8, 9]
println (range (5, 20, 2));     // [5, 7, 9, 11, 13, 15, 17, 19]

// clone
// Deep copy value and allocate space for new value

println (clone([10, 20, "hello"]));

// eval
// Eval srclang code from string

let v = 10;
println (eval ("println (v);"));

// pop
// pop value from list
println (pop([10, 20, 30]));

// call
// call srclang method with args
// call provide a safe evaluation of method and return any runtime failure as error
println (Complex, 10, 20);

// alloc
// Allocate a managed buffer
let buffer = alloc(10);

// free
// Manually free buffer or execute cleanup method if defined
free (buffer);

// lower
// Lower string values
println (lower ("HELLO"));

// upper
// Upper string values
println (upper("hello"));

// search
// search value in string, list or map and return index
println (search ([10, 20, 40, "ley"], "ley")); // 3

// system
// Platform independent method to execute system command

exit_code := system("ls", fun (output) {
    print (output);
});

// Informative Error messages
// C:\Users\itsma\Projects\srclang\code.src:76
// ERROR: Expected ';' but got 'for'
//  | for true {
//    ^