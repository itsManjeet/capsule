let Tree = fun (item, depth) {
    let self = {};
    self.item = item;
    self.depth = depth;

    if depth > 0 {
        let item2 = item + item;
        depth = depth -1;
        self.left = Tree (item2 - 1, depth);
        self.right = Tree (item2, depth);
    } else {
        self.left = null;
        self.right = null;
    }

    self.check = fun () {
        if self.left == null {
            return self.item;
        }

        return self.item + self.left.check() - self.right.check();
    };

    return self;
};

let min_depth = 4;
let max_depth = 14;
let stretch_depth = max_depth + 1;

println ("stretch tree of depth: ", stretch_depth);
println ("check: ", Tree(0, stretch_depth).check());

let long_lived_tree = Tree(0, max_depth);

let iter = 1;
let d = 0;
for d < max_depth {
    iter = iter * 2;
    d = d + 1;
}

let depth = min_depth;
for depth < stretch_depth {
    let check = 0;
    let i = 1;
    for i <= iter {
        check = check + Tree(i, depth).check() + Tree(-i, depth).check();
        i = i + 1;
    }

    println ("num trees: ", iter * 2);
    println ("depth: ", depth);
    println ("check: ", check);

    iter = iter / 4;
    depth = depth + 2;
}

println ("long lived tree of depth: ", max_depth);
println ("check: ", long_lived_tree.check());
