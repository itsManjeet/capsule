math := require("math.mod");
sys  := require("sys.mod");

let Widget = fun (onDraw, onEvent) {
    self := {};

    self.Render = fun (ctxt, x, y, width, height) {
        self.x = x;
        self.y = y;
        self.width = width;
        self.height = height;

        onDraw(ctxt, x, y, width, height);

        self.Update = fun () {
            onDraw(ctxt, x, y, width, height);
        };
    };

    self.PollEvent = fun (event) {
        return onEvent(self, event);
    };
    return self;
};

let HORIZONTAL = 0;
let VERTICAL = 1;

let Text = fun (data) {
    return Widget (fun (ctxt, x, y, width, height) {
        let text = contains(data, "text", "No Text");
        let center = contains(data, "center", true);

        let size = len(text);
    
        let ix = x;
        let iy = y;

        if (center) {
            ix = x + (width / 2) - (size / 2);
            iy = y + (height / 2);
        }

        for (ch in text) {
            if (ix >= width + x) {
                iy = iy + 1;
                ix = x;
            }

            if (iy >= height + y) {
                break;
            }

            ctxt.PutPixel(ix, iy, ch);
            ix = ix + 1;
        }

    }, fun (widget, event) {
        return false;
    });
};

let Box = fun (data) {
    return Widget (fun (ctxt, x, y, width, height) {
        let children = data.children or [];
        let padding = data.padding or 1;
        let spacing = data.spacing or 1;
        let orientation = data.orientation or HORIZONTAL;
        
        let count = len(children);

        ctxt.DrawRectangle(x, y, width, height);

        x = x + padding;
        y = y + padding;
        width = width - (padding * 2);
        height = height - (padding * 2);

        if (orientation == VERTICAL) {
            height = math.Round(height / count);
        } else {
            width = math.Round(width / count);
        }

        for (child in children) {
            child.Render(ctxt, x, y, width, height);

            if (orientation == VERTICAL) {
                y = y + height;
            } else {
                x = x + width;
            }
        }
    }, fun (widget, event) {
        let children = data.children or [];
        for (child in children) {
            if (child.PollEvent(event)) {
                return true;
            }
        }
    });
};


let Clickable = fun (data) {
    return Widget(fun (ctxt, x, y, width, height) {
        let child = data.child or Box {};
        child.Render(ctxt, x, y, width, height);

    }, fun (widget, event) {
        let onEvent = data.onEvent or null;
        if (onEvent != null) {
            return onEvent(widget, event);
        }
    });
};


let Button = fun (data) {
    return Clickable {
        child: Box {
            orientation: HORIZONTAL,
            padding: 1,
            children: [
                Text { text: data.label or "Click me" },
            ],
        },
        onEvent: fun (widget, event) {
            if (event == "\n") {
                if (data.onClick != null) {
                    data.onClick();
                    return true;
                }
            }
        },
    };
};