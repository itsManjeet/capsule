sys  := use("sys.mod");
math := use("math.mod");

let Screen = fun (width, height) {
    let buffer = alloc(width * height, str);
    self := {
        Buffer: buffer,
        Width: width,
        Height: height,

        Box: {
            TopLeft: "+",
            Top: "-",
            TopRight: "+",
            Left: "|",
            Center: " ",
            Right: "|",
            BottomLeft: "+",
            Bottom: "-",
            BottomRight: "+",
        }
    };

    self.PutPixel = fun (x, y, ch) {
        self.Buffer[math.Round(y) * self.Width + math.Round(x)] = ch;
    };

    self.GetPixel = fun (x, y) {
        return self.Buffer[y * self.Width + x];
    };

    self.Clear = fun (ch) {
        for (x in range(self.Width)) {
            for (y in range(self.Height)) {
                self.Buffer[y * self.Width + x] = ch;
            }
        }
    };

    self.DrawText = fun (x, y, s) {
        i := 0;
        for (ch in s) {
            self.PutPixel(x, y, ch);
            x = x + 1;
        }
    };

    self.DrawTextCenter = fun (x, y, s) {
        self.DrawText(x - (len(s) / 2), y, s);
    };

    self.DrawLine = fun (x1, y1, x2, y2, ch) {
        x1 = math.Round(x1);
        x2 = math.Round(x2);
        y1 = math.Round(y1);
        y2 = math.Round(y2);

        let dx = math.Abs(x2 - x1);
        let dy = math.Abs(y2 - y1);
        let sx = -1;
        let sy = -1;
        let err = dx - dy;
        let e2 = 0;

        if (x1 < x2) { sx = 1; }
        if (y1 < y2) { sy = 1; }

        for (true) {
            p := 0;
            z := 0;
            if (x1 >= 0 and x1 < self.Width and
                y1 >= 0 and y1 < self.Height) {
                    self.Buffer[y1 * self.Width + x1] = ch;
                }
            
            if (x1 == x2 and y1 == y2) {
                break;
            }
            e2 = 2 * err;
            if (e2 > -dy) {
                err = err - dy;
                x1 = x1 + sx;
            }

            if (e2 < dx) {
                err = err + dx;
                y1 = y1 + sy;
            }
        }
    };

    self.DrawRectangle = fun (x, y, w, h) {
        x = math.Round(x);
        y = math.Round(y);
        w = math.Round(w);
        h = math.Round(h);

        self.DrawLine(x, y, x + w , y, self.Box.Top);
        self.DrawLine(x, y + h, x + w, y + h, self.Box.Bottom);

        self.DrawLine(x, y, x, y + h, self.Box.Left);
        self.DrawLine(x + w, y, x + w, y + h, self.Box.Right);
        

        self.PutPixel(x, y, self.Box.TopLeft);
        self.PutPixel(x, y + h, self.Box.BottomLeft);
        self.PutPixel(x + w, y, self.Box.TopRight);
        self.PutPixel(x + w, y + h, self.Box.BottomRight);
    };

    self.PollEvent = fun () {
        print("\033[H");
        print(self.Buffer);
        return sys.Getkey();
    };
};

let runApp = fun (f) {
    let size = sys.Gettermsize();
    let screen = Screen(size.Columns, size.Rows);
    
    for (true) {
        screen.Clear(" ");
        let w = f();

        w.Render(screen, 0, 0, screen.Width - 1, screen.Height - 1);

        let ev = screen.PollEvent();
        if (ev == "q") {
            break;
        }
        
        w.PollEvent(ev);
    }
};